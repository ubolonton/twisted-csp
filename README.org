This is a port of https://github.com/olahol/node-csp, with
modifications to suit Python and Twisted, and some improvements.

Inspiration: http://swannodette.github.io/2013/08/24/es6-generators-and-csp

To run an example, use example.py script, like:
#+begin_src shell
python example.py blocking
#+end_src
Note that each example must be terminated manually since the event
loop is still running after all the processes finish.

Limitations (either fundamental to the approach, or of the implementation):

- No "deep" yield. Therefore it is impossible to extract pieces of
  logic that does channel communication without spawning a new process
  (maybe python 3 ("yield from") will help?). This can reduce composability.
- Cooperative multi-tasking.
- Need a running event loop.
- Channel's normal API cannot be used outside of a process (more
  precisely outside of the generator function of a process). Another
  set of API would be needed for that.
- Forgetting to yield causes bug.

#+begin_src python
import csp

class Ball:
    hits = 0


def player(name, table):
    while True:
        ball = yield table.take()
        ball.hits += 1
        print name, ball.hits
        # Forgot to yield => lightning fast pingpong player!
        csp.wait(0.1)
        yield table.put(ball)


@csp.process
def main():
    table = csp.Channel()

    yield csp.go(player, "ping", table)
    yield csp.go(player, "pong", table)

    yield table.put(Ball())
    yield csp.wait(1)

main()
#+end_src


#+begin_src python

def foo(in, out):
    v = yield in.take()
    yield out.put(v)
    # Do something else


def send(in, out):
    v = yield in.take()
    yield chan2.put(v)


def foo1(in, out):
    process = yield csp.spawn(send, in, out)
    yield csp.wait(process)

#+end_src
